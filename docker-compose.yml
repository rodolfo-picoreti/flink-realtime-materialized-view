---
version: '2'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    restart: always
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:7.0.0
    restart: always
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      # KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  # schema-registry:
  #   image: confluentinc/cp-schema-registry:7.0.0
  #   restart: always
  #   hostname: schema-registry
  #   container_name: schema-registry
  #   depends_on:
  #     - broker
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
  #     SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  connect:
    image: debezium/connect:1.7
    restart: always
    hostname: connect
    container_name: connect
    depends_on:
      - broker
      # - schema-registry
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: 'broker:29092'
      GROUP_ID: 'connect'
      CONFIG_STORAGE_TOPIC: 'docker-connect-configs'
      OFFSET_STORAGE_TOPIC: 'docker-connect-offsets'

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.0.0
    restart: always
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - connect
      # - schema-registry
      # - ksqldb-server
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      # CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      # CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      # CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  jobmanager:
    image: flink:1.13.3-scala_2.12
    restart: always
    ports:
      - "8080:8081"
    command: jobmanager
    volumes:
      - ./checkpoints:/checkpoints
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager

  taskmanager:
    image: flink:1.13.3-scala_2.12
    restart: always
    depends_on:
      - jobmanager
    command: taskmanager
    scale: 1
    volumes:
      - ./checkpoints:/checkpoints
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 2

  # docker-compose exec sql-client bash -c '${FLINK_HOME}/bin/sql-client.sh embedded -d ${FLINK_HOME}/conf/sql-client-conf.yaml -l ${SQL_CLIENT_HOME}/lib -f /flink.sql'
  sql-client:
    build: ./flink-sql-client
    restart: always
    depends_on:
      - broker
      - jobmanager
      - zookeeper
    volumes:
      - ./flink-sql-client/conf/flink-conf.yaml:/opt/flink/conf/flink-conf.yaml
      - ./flink-sql-client/conf/sql-client-conf.yaml:/opt/flink/conf/sql-client-conf.yaml
      - ./flink.sql:/flink.sql

  pyflink:
    build: ./pyflink
    restart: always
    depends_on:
      - broker
      - jobmanager
      - zookeeper
    volumes:
      - ./pyflink:/pyflink
      - ./flink-sql-client/conf/flink-conf.yaml:/opt/flink/conf/flink-conf.yaml

  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: postgres
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"

  postgres-data-gen:
    image: postgres:14-alpine
    restart: always
    depends_on:
      - broker
      - postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: postgres
    working_dir: /work
    volumes:
      - .:/work
    command:
      - "sh"
      - "data-gen.sh"

  create-connector:
    image: curlimages/curl
    restart: always
    depends_on:
      - broker
      - postgres
    working_dir: /work
    volumes:
      - .:/work
    command:
      - "sh"
      - "create-connector.sh"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.0
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536

  kibana:
    image: docker.elastic.co/kibana/kibana:7.6.0
    ports:
      - "5601:5601"
